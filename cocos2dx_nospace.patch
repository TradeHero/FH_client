diff --git a/cocos2dx/platform/CCFileUtils.cpp b/cocos2dx/platform/CCFileUtils.cpp
old mode 100644
new mode 100755
diff --git a/cocos2dx/platform/CCFileUtils.h b/cocos2dx/platform/CCFileUtils.h
old mode 100644
new mode 100755
index fd41bfc..0f96e2c
--- a/cocos2dx/platform/CCFileUtils.h
+++ b/cocos2dx/platform/CCFileUtils.h
@@ -330,6 +330,8 @@ public:
     virtual void setPopupNotify(bool bNotify);
     virtual bool isPopupNotify();
 
+	inline std::string getDefaultResRootPath() { return m_strDefaultResRootPath; }
+
 protected:
     /**
      *  The default constructor.
diff --git a/cocos2dx/platform/android/java/lint.xml b/cocos2dx/platform/android/java/lint.xml
new file mode 100644
index 0000000..ee0eead
--- /dev/null
+++ b/cocos2dx/platform/android/java/lint.xml
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<lint>
+</lint>
\ No newline at end of file
diff --git a/cocos2dx/platform/android/java/src/com/myhero/fh/util/DeviceUtil.java b/cocos2dx/platform/android/java/src/com/myhero/fh/util/DeviceUtil.java
new file mode 100644
index 0000000..bb879b9
--- /dev/null
+++ b/cocos2dx/platform/android/java/src/com/myhero/fh/util/DeviceUtil.java
@@ -0,0 +1,32 @@
+package com.myhero.fh.util;
+
+import android.content.Context;
+import android.view.View;
+import android.view.inputmethod.InputMethodManager;
+import com.myhero.fh.widget.FHCocos2dxHandler;
+import java.lang.ref.WeakReference;
+
+public class DeviceUtil {
+  @SuppressWarnings("Unused")
+  public static void hideKeyboard(long nativeSource) {
+    WeakReference<View> weakView = FHCocos2dxHandler.cachedBindingView.get(nativeSource);
+    if (weakView != null) {
+      View view = weakView.get();
+      if (view != null) {
+        hideKeyboard(view);
+      }
+    }
+  }
+
+  public static void hideKeyboard(View focusedView) {
+    InputMethodManager imm = (InputMethodManager) focusedView.getContext().getSystemService
+        (Context.INPUT_METHOD_SERVICE);
+    imm.hideSoftInputFromWindow(focusedView.getWindowToken(), 0);
+  }
+
+  public static void showKeyboard(View focusingView) {
+    InputMethodManager imm = (InputMethodManager) focusingView.getContext().getSystemService
+        (Context.INPUT_METHOD_SERVICE);
+    imm.showSoftInput(focusingView, 0);
+  }
+}
diff --git a/cocos2dx/platform/android/java/src/com/myhero/fh/util/MiscUtil.java b/cocos2dx/platform/android/java/src/com/myhero/fh/util/MiscUtil.java
new file mode 100644
index 0000000..e51ad90
--- /dev/null
+++ b/cocos2dx/platform/android/java/src/com/myhero/fh/util/MiscUtil.java
@@ -0,0 +1,185 @@
+package com.myhero.fh.util;
+
+import android.content.ActivityNotFoundException;
+import android.content.Intent;
+import android.database.Cursor;
+import android.graphics.*;
+import android.net.Uri;
+import android.util.Log;
+import android.provider.MediaStore;
+import org.cocos2dx.lib.Cocos2dxActivity;
+import org.cocos2dx.lib.Cocos2dxHelper;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+
+public class MiscUtil {
+  private static final String TAG = MiscUtil.class.getSimpleName();
+
+  public static final int REQUEST_CODE_SEND_EMAIL = 1;
+  public static final int REQUEST_CODE_SEND_SMS = 2;
+  public static final int REQUEST_CODE_SELECT_IMAGE = 3;
+
+  private static String mImagePath = "";
+  private static int mImageWidth = 0;
+  private static int mImageHeight = 0;
+
+  public static void sendMail(String receiver, String subject, String body) {
+    Intent intent = new Intent(Intent.ACTION_SEND);
+    intent.setType("plain/text");
+    intent.putExtra(Intent.EXTRA_EMAIL, new String[] { receiver });
+    intent.putExtra(Intent.EXTRA_SUBJECT, subject);
+    intent.putExtra(Intent.EXTRA_TEXT, body);
+    try {
+      Cocos2dxActivity.sendMail(Intent.createChooser(intent, ""));
+    }
+    catch (ActivityNotFoundException ignored) {
+      sendMailResult(-1);
+    }
+  }
+
+  public static void sendSms(String body) {
+    Uri smsUri = Uri.parse("tel:");
+    Intent intent = new Intent(Intent.ACTION_VIEW, smsUri);
+    intent.putExtra("sms_body", body);
+    intent.setType("vnd.android-dir/mms-sms");
+
+    try {
+      Cocos2dxActivity.sendSms(intent);
+    }
+    catch (ActivityNotFoundException ignored) {
+      sendMailResult(-1);
+    }
+  }
+
+  public static void openUrl(String url) {
+      try {
+          Uri uri = Uri.parse(url);
+          Intent intent = new Intent (Intent.ACTION_VIEW, uri);
+          Cocos2dxActivity.openUrl(intent);
+      }
+      catch (ActivityNotFoundException ignored) {
+
+      }
+  }
+
+    public static void selectImage(String path, int width, int height) {
+        mImagePath = Cocos2dxHelper.getCocos2dxWritablePath() + "/" + path;
+        mImageWidth = width;
+        mImageHeight = height;
+        try {
+            Intent intent = new Intent();
+            intent.setType("image/*");
+            intent.setAction(Intent.ACTION_GET_CONTENT);
+            Cocos2dxActivity.selectImage(intent);
+        }
+        catch (ActivityNotFoundException ignored) {
+
+        }
+    }
+
+    public static void getDeepLink() {
+        String deepLink = ((Cocos2dxActivity)Cocos2dxActivity.getContext()).getDeepLink();
+        notifyDeepLink(deepLink);
+    }
+
+    public static void openRate() {
+        Cocos2dxActivity activity = ((Cocos2dxActivity)Cocos2dxActivity.getContext());
+        try {
+            final String pkgName = activity.getPackageName();
+            activity.startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse("market://details?id=" + pkgName)));
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+  public static void onActivityResult(int requestCode, int resultCode, Intent data) {
+    Log.d(TAG, String.format("requestCode(%d), resultCode(%d), data(%s)", requestCode,
+        resultCode, data));
+
+
+    // There isn't a way to know about the result of email/sms sending request
+    switch (requestCode) {
+      case REQUEST_CODE_SEND_EMAIL:
+        //if (resultCode == Activity.RESULT_OK) {
+        sendMailResult(1);
+        //} else {
+        //  sendMailResult(-1);
+        //}
+        break;
+      case REQUEST_CODE_SEND_SMS:
+        //if (resultCode == Activity.RESULT_OK) {
+        sendSmsResult(1);
+        //} else {
+        //  sendSmsResult(-1);
+        //}
+        break;
+
+        case REQUEST_CODE_SELECT_IMAGE:
+            if(data == null)
+            {
+                selectImageResult(false);
+                return;
+            }
+            Uri photoUri = data.getData();
+            if(photoUri == null )
+            {
+                selectImageResult(false);
+                return;
+            }
+
+            Log.d(TAG, String.format("Select image url(%s)", photoUri.toString())); // content://media/external/images/media/130852
+            String[] pojo = {MediaStore.Images.Media.DATA};
+            Cursor cursor = Cocos2dxActivity.getContext().getContentResolver().query(photoUri, pojo, null, null, null);
+            if(cursor != null && cursor.moveToFirst())
+            {
+                int columnIndex = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
+                String imagePath = cursor.getString(columnIndex);
+                cursor.close();
+                Log.i(TAG, "imagePath = " + imagePath);  // /storage/sdcard0/Nikon_WU/Card/D20130928_001/100NIKON/DSCN2559.JPG
+
+                Bitmap originBitmap = BitmapFactory.decodeFile(imagePath);
+                Bitmap scaledBitmap = Bitmap.createBitmap(mImageWidth, mImageHeight, Bitmap.Config.ARGB_8888);
+                Canvas canvas = new Canvas(scaledBitmap);
+                canvas.drawBitmap(originBitmap, null, new Rect(0, 0, mImageWidth, mImageHeight), null);
+                File saveFile = new File(mImagePath);
+                if(saveFile.exists()){
+                    saveFile.delete();
+                }
+                FileOutputStream out = null;
+                try {
+                    File f = new File(mImagePath);
+                    out = new FileOutputStream(f);
+                    scaledBitmap.compress(Bitmap.CompressFormat.JPEG, 80, out);
+                    out.flush();
+                    MediaStore.Images.Media.insertImage(Cocos2dxActivity.getContext().getContentResolver(), f.getAbsolutePath(), f.getName(), f.getName());
+                    selectImageResult(true);
+                }
+                catch(Exception e)
+                {
+                    selectImageResult(false);
+                }
+                finally {
+                    try {
+                        if (out != null) {
+                            out.close();
+                        }
+                    } catch (IOException e) {
+                        e.printStackTrace();
+                    }
+                }
+            }
+            else
+            {
+                selectImageResult(false);
+            }
+            break;
+    }
+  }
+
+    public static native void sendMailResult(int resultCode);
+    public static native void sendSmsResult(int resultCode);
+    public static native void selectImageResult(boolean success);
+    public static native void notifyDeepLink(String deepLink);
+}
diff --git a/cocos2dx/platform/android/java/src/com/myhero/fh/widget/FHCocos2dxHandler.java b/cocos2dx/platform/android/java/src/com/myhero/fh/widget/FHCocos2dxHandler.java
new file mode 100644
index 0000000..72152e2
--- /dev/null
+++ b/cocos2dx/platform/android/java/src/com/myhero/fh/widget/FHCocos2dxHandler.java
@@ -0,0 +1,117 @@
+package com.myhero.fh.widget;
+
+import android.graphics.Color;
+import android.graphics.Rect;
+import android.os.Message;
+import android.view.KeyEvent;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.inputmethod.EditorInfo;
+import com.myhero.fh.util.DeviceUtil;
+import java.lang.ref.WeakReference;
+import java.util.HashMap;
+import java.util.Map;
+import org.cocos2dx.lib.Cocos2dxActivity;
+import org.cocos2dx.lib.Cocos2dxHandler;
+
+public class FHCocos2dxHandler extends Cocos2dxHandler {
+  // TODO make this private, singleton ... for now, it is public :(
+  public static Map<Long, WeakReference<View>> cachedBindingView = new HashMap<Long,
+      WeakReference<View>>();
+
+  public FHCocos2dxHandler(Cocos2dxActivity activity) {
+    super(activity);
+  }
+
+  public static void unfocusIfNecessary(View currentFocusedView, MotionEvent event) {
+    boolean hasNewFocus = false;
+    for (WeakReference<View> weakView: cachedBindingView.values()) {
+      View focusedView = weakView.get();
+      if (focusedView != null && focusedView.getVisibility() == View.VISIBLE) {
+        Rect outRect = new Rect();
+        focusedView.getGlobalVisibleRect(outRect);
+        if (!outRect.contains((int) event.getRawX(), (int) event.getRawY())) {
+          focusedView.clearFocus();
+        } else {
+          hasNewFocus = true;
+        }
+      }
+    }
+
+    if (!hasNewFocus) {
+      DeviceUtil.hideKeyboard(currentFocusedView);
+    }
+  }
+
+  @Override protected void showEditBoxDialog(Message msg) {
+    EditBoxMessage editBoxMessage = (EditBoxMessage)msg.obj;
+
+    Cocos2dxActivity activity = mActivity.get();
+    if (activity != null && editBoxMessage.getSource() != 0) {
+      WeakReference<View> cachedViewWeak = cachedBindingView.get(editBoxMessage.getSource());
+      OverlayEditText editText = null;
+      if (cachedViewWeak != null) {
+        View cachedView = cachedViewWeak.get();
+        if (cachedView instanceof OverlayEditText) {
+          editText = (OverlayEditText) cachedView;
+          editText.setVisibility(View.VISIBLE);
+        }
+      }
+      if (editText == null) {
+        editText = spawnAndroidEditText(activity);
+        cachedBindingView.put(editBoxMessage.getSource(), new WeakReference<View>(editText));
+      }
+      editText.processNativeData(editBoxMessage);
+      editText.requestFocus();
+      DeviceUtil.showKeyboard(editText);
+
+      hackToPushScreenUp(editText);
+    }
+  }
+
+  /**
+   * Simulate entering text action to current focused EditTextView, so that the system will move the
+   * screen up
+   * @param editText current focused EditText view
+   */
+  private void hackToPushScreenUp(OverlayEditText editText) {
+    if (editText.getText().toString().length() == 0) {
+      final OverlayEditText finalEditText = editText;
+      editText.postDelayed(new Runnable() {
+        @Override public void run() {
+          if (finalEditText.getVisibility() == View.VISIBLE) {
+            finalEditText.dispatchKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_0));
+            finalEditText.setText("");
+          }
+        }
+      }, 500);
+    }
+  }
+
+  private OverlayEditText spawnAndroidEditText(Cocos2dxActivity activity) {
+    final OverlayEditText editText = new OverlayEditText(activity, null);
+    editText.setBackgroundColor(Color.TRANSPARENT);
+    // TODO get text color from Cocos2Dx
+    editText.setTextColor(activity.getResources().getColor(android.R.color.white));
+    editText.setImeOptions(EditorInfo.IME_FLAG_NO_EXTRACT_UI);
+
+    ViewGroup.LayoutParams layoutParams = new ViewGroup.LayoutParams(
+        ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
+    ((ViewGroup) activity.getWindow().getDecorView()).addView(editText,
+        layoutParams);
+    return editText;
+  }
+
+  public static void destroyBindingView(long source) {
+    WeakReference<View> weakView = cachedBindingView.get(source);
+    if (weakView != null) {
+      View view = weakView.get();
+      if (view != null && view.getParent() instanceof ViewGroup) {
+        ViewGroup vg = (ViewGroup)(view.getParent());
+        vg.removeView(view);
+        cachedBindingView.remove(source);
+      }
+    }
+  }
+}
diff --git a/cocos2dx/platform/android/java/src/com/myhero/fh/widget/NativeAdapter.java b/cocos2dx/platform/android/java/src/com/myhero/fh/widget/NativeAdapter.java
new file mode 100644
index 0000000..a940c6c
--- /dev/null
+++ b/cocos2dx/platform/android/java/src/com/myhero/fh/widget/NativeAdapter.java
@@ -0,0 +1,5 @@
+package com.myhero.fh.widget;
+
+public interface NativeAdapter<T extends NativeData> {
+  void processNativeData(T nativeData);
+}
diff --git a/cocos2dx/platform/android/java/src/com/myhero/fh/widget/NativeData.java b/cocos2dx/platform/android/java/src/com/myhero/fh/widget/NativeData.java
new file mode 100644
index 0000000..b07d0dd
--- /dev/null
+++ b/cocos2dx/platform/android/java/src/com/myhero/fh/widget/NativeData.java
@@ -0,0 +1,5 @@
+package com.myhero.fh.widget;
+
+public interface NativeData {
+  long getSource();
+}
diff --git a/cocos2dx/platform/android/java/src/com/myhero/fh/widget/OverlayEditText.java b/cocos2dx/platform/android/java/src/com/myhero/fh/widget/OverlayEditText.java
new file mode 100644
index 0000000..1abfc8e
--- /dev/null
+++ b/cocos2dx/platform/android/java/src/com/myhero/fh/widget/OverlayEditText.java
@@ -0,0 +1,180 @@
+package com.myhero.fh.widget;
+
+import android.content.Context;
+import android.text.InputType;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.view.View;
+import android.widget.EditText;
+import org.cocos2dx.lib.Cocos2dxHandler;
+import org.cocos2dx.lib.Cocos2dxHelper;
+
+public class OverlayEditText extends EditText
+  implements NativeAdapter<Cocos2dxHandler.EditBoxMessage> {
+  private static final String TAG = OverlayEditText.class.getSimpleName();
+  /**
+   * The user is allowed to enter any text, including line breaks.
+   */
+  private final int kEditBoxInputModeAny = 0;
+
+  /**
+   * The user is allowed to enter an e-mail address.
+   */
+  private final int kEditBoxInputModeEmailAddr = 1;
+
+  /**
+   * The user is allowed to enter an integer value.
+   */
+  private final int kEditBoxInputModeNumeric = 2;
+
+  /**
+   * The user is allowed to enter a phone number.
+   */
+  private final int kEditBoxInputModePhoneNumber = 3;
+
+  /**
+   * The user is allowed to enter a URL.
+   */
+  private final int kEditBoxInputModeUrl = 4;
+
+  /**
+   * The user is allowed to enter a real number value. This extends kEditBoxInputModeNumeric by allowing a decimal point.
+   */
+  private final int kEditBoxInputModeDecimal = 5;
+
+  /**
+   * The user is allowed to enter any text, except for line breaks.
+   */
+  private final int kEditBoxInputModeSingleLine = 6;
+
+  /**
+   * Indicates that the text entered is confidential data that should be obscured whenever possible. This implies EDIT_BOX_INPUT_FLAG_SENSITIVE.
+   */
+  private final int kEditBoxInputFlagPassword = 0;
+
+  /**
+   * Indicates that the text entered is sensitive data that the implementation must never store into a dictionary or table for use in predictive, auto-completing, or other accelerated input schemes. A credit card number is an example of sensitive data.
+   */
+  private final int kEditBoxInputFlagSensitive = 1;
+
+  /**
+   * This flag is a hint to the implementation that during text editing, the initial letter of each word should be capitalized.
+   */
+  private final int kEditBoxInputFlagInitialCapsWord = 2;
+
+  /**
+   * This flag is a hint to the implementation that during text editing, the initial letter of each sentence should be capitalized.
+   */
+  private final int kEditBoxInputFlagInitialCapsSentence = 3;
+
+  /**
+   * Capitalize all characters automatically.
+   */
+  private final int kEditBoxInputFlagInitialCapsAllCharacters = 4;
+
+  private final int kKeyboardReturnTypeDefault = 0;
+  private final int kKeyboardReturnTypeDone = 1;
+  private final int kKeyboardReturnTypeSend = 2;
+  private final int kKeyboardReturnTypeSearch = 3;
+  private final int kKeyboardReturnTypeGo = 4;
+
+  private NativeData nativeData;
+
+  public OverlayEditText(Context context, AttributeSet attrs) {
+    super(context, attrs);
+
+    super.setOnFocusChangeListener(new View.OnFocusChangeListener() {
+      @Override public void onFocusChange(View v, boolean hasFocus) {
+        Log.d(TAG, String.format("hasFocus: %b", hasFocus));
+        if (!hasFocus) {
+          invalidateNative();
+        } else {
+          setSelection(getText().length());
+        }
+      }
+    });
+  }
+
+  private void invalidateNative() {
+    Cocos2dxHelper.setEditTextDialogResult(nativeData.getSource(), getText().toString());
+    setVisibility(GONE);
+  }
+
+  @Override public final void setOnFocusChangeListener(OnFocusChangeListener l) {
+    throw new IllegalAccessError("This method is not supposed to be called");
+  }
+
+  @Override public void clearFocus() {
+    super.clearFocus();
+    invalidateNative();
+  }
+
+  @Override public void processNativeData(Cocos2dxHandler.EditBoxMessage editBoxMessage) {
+    Log.d(TAG, String.format("Data [%s]", editBoxMessage));
+    nativeData = editBoxMessage;
+
+    setText(editBoxMessage.content);
+    setHint(editBoxMessage.title);
+
+    // populate UI properties
+    // TODO
+    setX(editBoxMessage.x);
+    setY(editBoxMessage.y);
+    setWidth((int) editBoxMessage.width);
+    setHeight((int) editBoxMessage.height);
+    setTextColor(editBoxMessage.color);
+
+    setSingleLine();
+    setPadding(0, 0, 0, 0);
+
+    // and editing options
+    int inputModeConstraints = 0;
+    switch (editBoxMessage.inputMode) {
+      case kEditBoxInputModeAny:
+        inputModeConstraints |= InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_MULTI_LINE;
+        break;
+      case kEditBoxInputModeEmailAddr:
+        inputModeConstraints |= InputType.TYPE_CLASS_TEXT | InputType
+            .TYPE_TEXT_VARIATION_EMAIL_ADDRESS;
+        break;
+      case kEditBoxInputModeNumeric:
+        inputModeConstraints |= InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_SIGNED;
+        break;
+      case kEditBoxInputModePhoneNumber:
+        inputModeConstraints |= InputType.TYPE_CLASS_PHONE;
+        break;
+      case kEditBoxInputModeUrl:
+        inputModeConstraints |= InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_URI;
+        break;
+      case kEditBoxInputModeDecimal:
+        inputModeConstraints |= InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL
+            | InputType.TYPE_NUMBER_FLAG_SIGNED;
+        break;
+      case kEditBoxInputModeSingleLine:
+        inputModeConstraints |= InputType.TYPE_CLASS_TEXT;
+        break;
+    }
+
+    int inputFlagConstraints = 0;
+    switch (editBoxMessage.inputFlag) {
+      case kEditBoxInputFlagPassword:
+        inputFlagConstraints |= InputType.TYPE_CLASS_TEXT | InputType
+          .TYPE_TEXT_VARIATION_PASSWORD;
+        break;
+      case kEditBoxInputFlagSensitive:
+        inputFlagConstraints |= InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
+        break;
+      case kEditBoxInputFlagInitialCapsWord:
+        inputFlagConstraints |= InputType.TYPE_TEXT_FLAG_CAP_WORDS;
+        break;
+      //case kEditBoxInputFlagInitialCapsSentence:
+      //  inputFlagConstraints |= InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
+      //  break;
+      //case kEditBoxInputFlagInitialCapsAllCharacters:
+      //  inputFlagConstraints |= InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS;
+      //  break;
+    }
+
+    setInputType(inputModeConstraints | inputFlagConstraints);
+  }
+}
diff --git a/cocos2dx/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java b/cocos2dx/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java
index 57aa11c..abe4b5e 100644
--- a/cocos2dx/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java
+++ b/cocos2dx/platform/android/java/src/org/cocos2dx/lib/Cocos2dxActivity.java
@@ -23,18 +23,24 @@ THE SOFTWARE.
  ****************************************************************************/
 package org.cocos2dx.lib;
 
-import org.cocos2dx.lib.Cocos2dxHelper.Cocos2dxHelperListener;
-
-import android.app.Activity;
+import android.content.ActivityNotFoundException;
 import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
 import android.os.Build;
 import android.os.Bundle;
+import android.os.Handler;
 import android.os.Message;
-import android.view.ViewGroup;
+import android.support.v4.app.FragmentActivity;
 import android.util.Log;
+import android.view.MotionEvent;
+import android.view.ViewGroup;
 import android.widget.FrameLayout;
+import com.myhero.fh.util.MiscUtil;
+import com.myhero.fh.widget.FHCocos2dxHandler;
+import org.cocos2dx.lib.Cocos2dxHelper.Cocos2dxHelperListener;
 
-public abstract class Cocos2dxActivity extends Activity implements Cocos2dxHelperListener {
+public abstract class Cocos2dxActivity extends FragmentActivity implements Cocos2dxHelperListener {
   // ===========================================================
   // Constants
   // ===========================================================
@@ -46,13 +52,16 @@ public abstract class Cocos2dxActivity extends Activity implements Cocos2dxHelpe
   // ===========================================================
 
   private Cocos2dxGLSurfaceView mGLSurfaceView;
-	private Cocos2dxHandler mHandler;
+  private Handler mHandler;
+  private String m_deepLink = null;
   private static Context sContext = null;
 
   public static Context getContext() {
     return sContext;
   }
 
+  public String getDeepLink() { return m_deepLink; }
+
   // ===========================================================
   // Constructors
   // ===========================================================
@@ -61,11 +70,32 @@ public abstract class Cocos2dxActivity extends Activity implements Cocos2dxHelpe
   protected void onCreate(final Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     sContext = this;
-    	this.mHandler = new Cocos2dxHandler(this);
+
+    // TODO use FHCocos2dxHandler. Dependency injection can be helpful here.
+    this.mHandler = new FHCocos2dxHandler(this);
 
     this.init();
 
     Cocos2dxHelper.init(this, this);
+
+    Intent intent = getIntent();
+    String action = intent.getAction();
+    Uri data = intent.getData();
+
+    Log.v("###", "Get intent with action: " + action);
+    if (data != null)
+    {
+      Log.v("###", "Get intent with data: " + data.toString());
+      m_deepLink = data.getPath();
+      MiscUtil.notifyDeepLink(m_deepLink);
+    }
+  }
+
+  @Override public boolean dispatchTouchEvent(MotionEvent event) {
+    if (event.getAction() == MotionEvent.ACTION_DOWN) {
+      FHCocos2dxHandler.unfocusIfNecessary(getCurrentFocus(), event);
+    }
+    return super.dispatchTouchEvent(event);
   }
 
   // ===========================================================
@@ -101,10 +131,15 @@ public abstract class Cocos2dxActivity extends Activity implements Cocos2dxHelpe
   }
 
   @Override
-	public void showEditTextDialog(final String pTitle, final String pContent, final int pInputMode, final int pInputFlag, final int pReturnType, final int pMaxLength) { 
+  public void showEditTextDialog(final long source, final String pTitle, final String pContent,
+      final int pInputMode,
+      final int pInputFlag, final int pReturnType, final int pMaxLength, float x, float y,
+      float width, float height, int color) {
     Message msg = new Message();
     msg.what = Cocos2dxHandler.HANDLER_SHOW_EDITBOX_DIALOG;
-		msg.obj = new Cocos2dxHandler.EditBoxMessage(pTitle, pContent, pInputMode, pInputFlag, pReturnType, pMaxLength);
+    msg.obj =
+        new Cocos2dxHandler.EditBoxMessage(source, pTitle, pContent, pInputMode, pInputFlag,
+            pReturnType, pMaxLength, x, y, width, height, color);
     this.mHandler.sendMessage(msg);
   }
 
@@ -120,14 +155,14 @@ public abstract class Cocos2dxActivity extends Activity implements Cocos2dxHelpe
 
     // FrameLayout
     ViewGroup.LayoutParams framelayout_params =
-            new ViewGroup.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,
-                                       ViewGroup.LayoutParams.FILL_PARENT);
+        new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,
+            ViewGroup.LayoutParams.MATCH_PARENT);
     FrameLayout framelayout = new FrameLayout(this);
     framelayout.setLayoutParams(framelayout_params);
 
     // Cocos2dxEditText layout
     ViewGroup.LayoutParams edittext_layout_params =
-            new ViewGroup.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,
+        new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,
             ViewGroup.LayoutParams.WRAP_CONTENT);
     Cocos2dxEditText edittext = new Cocos2dxEditText(this);
     edittext.setLayoutParams(edittext_layout_params);
@@ -142,8 +177,7 @@ public abstract class Cocos2dxActivity extends Activity implements Cocos2dxHelpe
     framelayout.addView(this.mGLSurfaceView);
 
     // Switch to supported OpenGL (ARGB888) mode on emulator
-        if (isAndroidEmulator())
-           this.mGLSurfaceView.setEGLConfigChooser(8 , 8, 8, 8, 16, 0);
+    if (isAndroidEmulator()) this.mGLSurfaceView.setEGLConfigChooser(8, 8, 8, 8, 16, 0);
 
     this.mGLSurfaceView.setCocos2dxRenderer(new Cocos2dxRenderer());
     this.mGLSurfaceView.setCocos2dxEditText(edittext);
@@ -163,12 +197,43 @@ public abstract class Cocos2dxActivity extends Activity implements Cocos2dxHelpe
     Log.d(TAG, "product=" + product);
     boolean isEmulator = false;
     if (product != null) {
-         isEmulator = product.equals("sdk") || product.contains("_sdk") || product.contains("sdk_");
+      isEmulator = product.equals("sdk")
+          || product.contains("_sdk")
+          || product.contains("sdk_")
+          || product.contains("vbox");
     }
     Log.d(TAG, "isEmulator=" + isEmulator);
     return isEmulator;
   }
 
+  public static void sendMail(Intent intent) throws ActivityNotFoundException {
+    Cocos2dxActivity activity = ((Cocos2dxActivity) sContext);
+    activity.startActivityForResult(intent, MiscUtil.REQUEST_CODE_SEND_EMAIL);
+    activity.setResult(RESULT_OK);
+  }
+
+  public static void sendSms(Intent intent) throws ActivityNotFoundException {
+    Cocos2dxActivity activity = ((Cocos2dxActivity) sContext);
+    activity.startActivityForResult(intent, MiscUtil.REQUEST_CODE_SEND_SMS);
+    activity.setResult(RESULT_OK);
+  }
+
+    public static void openUrl(Intent intent) throws ActivityNotFoundException {
+        Cocos2dxActivity activity = ((Cocos2dxActivity) sContext);
+        activity.startActivity(intent);
+    }
+
+    public static void selectImage(Intent intent) throws  ActivityNotFoundException {
+        Cocos2dxActivity activity = (Cocos2dxActivity) sContext;
+        activity.startActivityForResult(intent, MiscUtil.REQUEST_CODE_SELECT_IMAGE);
+    }
+
+  @Override protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+    super.onActivityResult(requestCode, resultCode, data);
+
+    MiscUtil.onActivityResult(requestCode, resultCode, data);
+  }
+
   // ===========================================================
   // Inner and Anonymous Classes
   // ===========================================================
diff --git a/cocos2dx/platform/android/java/src/org/cocos2dx/lib/Cocos2dxBitmap.java b/cocos2dx/platform/android/java/src/org/cocos2dx/lib/Cocos2dxBitmap.java
index fcd4598..8a492c5 100644
--- a/cocos2dx/platform/android/java/src/org/cocos2dx/lib/Cocos2dxBitmap.java
+++ b/cocos2dx/platform/android/java/src/org/cocos2dx/lib/Cocos2dxBitmap.java
@@ -309,9 +309,7 @@ public class Cocos2dxBitmap {
 			final int pMaxWidth, final int pMaxHeight, final Paint pPaint) {
 		final String[] lines = pString.split("\\n");
 		String[] ret = null;
-		final FontMetricsInt fm = pPaint.getFontMetricsInt();
-		final int heightPerLine = (int) Math.ceil(fm.bottom - fm.top);
-		final int maxLines = pMaxHeight / heightPerLine;
+		final int maxLines = 0;
 
 		if (pMaxWidth != 0) {
 			final LinkedList<String> strList = new LinkedList<String>();
diff --git a/cocos2dx/platform/android/java/src/org/cocos2dx/lib/Cocos2dxEditBoxDialog.java b/cocos2dx/platform/android/java/src/org/cocos2dx/lib/Cocos2dxEditBoxDialog.java
index 0b1a8a3..98c3c7e 100755
--- a/cocos2dx/platform/android/java/src/org/cocos2dx/lib/Cocos2dxEditBoxDialog.java
+++ b/cocos2dx/platform/android/java/src/org/cocos2dx/lib/Cocos2dxEditBoxDialog.java
@@ -156,7 +156,8 @@ public class Cocos2dxEditBoxDialog extends Dialog {
 		final LinearLayout layout = new LinearLayout(this.getContext());
 		layout.setOrientation(LinearLayout.VERTICAL);
 
-		final LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT, ViewGroup.LayoutParams.FILL_PARENT);
+		final LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(ViewGroup
+        .LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
 
 		this.mTextViewTitle = new TextView(this.getContext());
 		final LinearLayout.LayoutParams textviewParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
@@ -165,7 +166,7 @@ public class Cocos2dxEditBoxDialog extends Dialog {
 		layout.addView(this.mTextViewTitle, textviewParams);
 
 		this.mInputEditText = new EditText(this.getContext());
-		final LinearLayout.LayoutParams editTextParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
+		final LinearLayout.LayoutParams editTextParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
 		editTextParams.leftMargin = editTextParams.rightMargin = this.convertDipsToPixels(10);
 
 		layout.addView(this.mInputEditText, editTextParams);
@@ -276,7 +277,8 @@ public class Cocos2dxEditBoxDialog extends Dialog {
 			public boolean onEditorAction(final TextView v, final int actionId, final KeyEvent event) {
 				/* If user didn't set keyboard type, this callback will be invoked twice with 'KeyEvent.ACTION_DOWN' and 'KeyEvent.ACTION_UP'. */
 				if (actionId != EditorInfo.IME_NULL || (actionId == EditorInfo.IME_NULL && event != null && event.getAction() == KeyEvent.ACTION_DOWN)) {
-					Cocos2dxHelper.setEditTextDialogResult(Cocos2dxEditBoxDialog.this.mInputEditText.getText().toString());
+					Cocos2dxHelper.setEditTextDialogResult(0,
+              Cocos2dxEditBoxDialog.this.mInputEditText.getText().toString());
 					Cocos2dxEditBoxDialog.this.closeKeyboard();
 					Cocos2dxEditBoxDialog.this.dismiss();
 					return true;
diff --git a/cocos2dx/platform/android/java/src/org/cocos2dx/lib/Cocos2dxHandler.java b/cocos2dx/platform/android/java/src/org/cocos2dx/lib/Cocos2dxHandler.java
index 47639af..3bd6da6 100644
--- a/cocos2dx/platform/android/java/src/org/cocos2dx/lib/Cocos2dxHandler.java
+++ b/cocos2dx/platform/android/java/src/org/cocos2dx/lib/Cocos2dxHandler.java
@@ -24,12 +24,12 @@ THE SOFTWARE.
 
 package org.cocos2dx.lib;
 
-import java.lang.ref.WeakReference;
-
 import android.app.AlertDialog;
 import android.content.DialogInterface;
 import android.os.Handler;
 import android.os.Message;
+import com.myhero.fh.widget.NativeData;
+import java.lang.ref.WeakReference;
 
 public class Cocos2dxHandler extends Handler {
 	// ===========================================================
@@ -41,7 +41,7 @@ public class Cocos2dxHandler extends Handler {
 	// ===========================================================
 	// Fields
 	// ===========================================================
-	private WeakReference<Cocos2dxActivity> mActivity;
+	protected WeakReference<Cocos2dxActivity> mActivity;
 	
 	// ===========================================================
 	// Constructors
@@ -77,7 +77,7 @@ public class Cocos2dxHandler extends Handler {
 		Cocos2dxActivity theActivity = this.mActivity.get();
 		DialogMessage dialogMessage = (DialogMessage)msg.obj;
 		new AlertDialog.Builder(theActivity)
-		.setTitle(dialogMessage.titile)
+		.setTitle(dialogMessage.title)
 		.setMessage(dialogMessage.message)
 		.setPositiveButton("Ok", 
 				new DialogInterface.OnClickListener() {
@@ -90,14 +90,11 @@ public class Cocos2dxHandler extends Handler {
 				}).create().show();
 	}
 
-	private void showEditBoxDialog(Message msg) {
+  protected void showEditBoxDialog(Message msg) {
     EditBoxMessage editBoxMessage = (EditBoxMessage) msg.obj;
-		new Cocos2dxEditBoxDialog(this.mActivity.get(),
-				editBoxMessage.title,
-				editBoxMessage.content,
-				editBoxMessage.inputMode,
-				editBoxMessage.inputFlag,
-				editBoxMessage.returnType,
+
+    new Cocos2dxEditBoxDialog(this.mActivity.get(), editBoxMessage.title, editBoxMessage.content,
+        editBoxMessage.inputMode, editBoxMessage.inputFlag, editBoxMessage.returnType,
         editBoxMessage.maxLength).show();
   }
 
@@ -106,30 +103,64 @@ public class Cocos2dxHandler extends Handler {
 	// ===========================================================
 	
 	public static class DialogMessage {
-		public String titile;
+		public String title;
 		public String message;
 		
 		public DialogMessage(String title, String message) {
-			this.titile = title;
+			this.title = title;
 			this.message = message;
 		}
 	}
 	
-	public static class EditBoxMessage {
-		public String title;
-		public String content;
-		public int inputMode;
-		public int inputFlag;
-		public int returnType;
-		public int maxLength;
-		
-		public EditBoxMessage(String title, String content, int inputMode, int inputFlag, int returnType, int maxLength){
+	public static class EditBoxMessage
+      implements NativeData {
+    private final long source;
+		public final String title;
+    public final String content;
+		public final int inputMode;
+		public final int inputFlag;
+		public final int returnType;
+		public final int maxLength;
+    public final float x;
+    public final float y;
+    public final float width;
+    public final float height;
+        public final int color;
+
+    public EditBoxMessage(long source, String title, String content, int inputMode, int inputFlag,
+        int returnType, int maxLength,
+        float x, float y, float width, float height, int color){
+      this.source = source;
       this.content = content;
 			this.title = title;
 			this.inputMode = inputMode;
 			this.inputFlag = inputFlag;
 			this.returnType = returnType;
 			this.maxLength = maxLength;
+      this.x = x;
+      this.y = y;
+      this.width = width;
+      this.height = height;
+        this.color = color;
+    }
+
+    @Override public String toString() {
+      return
+          "\ncontent: " + content +
+          "\ntitle: " + title +
+          "\ninputMode: " + inputMode +
+          "\ninputFlag: " + inputFlag +
+          "\nreturnType: " + returnType +
+          "\nmaxLength: " + maxLength +
+          "\nx: " + x +
+          "\ny: " + y +
+          "\nwidth: " + width +
+          "\nheight: " + height
+          ;
+    }
+
+    @Override public long getSource() {
+      return source;
     }
   }
 }
diff --git a/cocos2dx/platform/android/java/src/org/cocos2dx/lib/Cocos2dxHelper.java b/cocos2dx/platform/android/java/src/org/cocos2dx/lib/Cocos2dxHelper.java
index f4459f5..0fca151 100644
--- a/cocos2dx/platform/android/java/src/org/cocos2dx/lib/Cocos2dxHelper.java
+++ b/cocos2dx/platform/android/java/src/org/cocos2dx/lib/Cocos2dxHelper.java
@@ -23,9 +23,6 @@ THE SOFTWARE.
  ****************************************************************************/
 package org.cocos2dx.lib;
 
-import java.io.UnsupportedEncodingException;
-import java.util.Locale;
-
 import android.app.Activity;
 import android.content.Context;
 import android.content.SharedPreferences;
@@ -35,6 +32,8 @@ import android.os.Build;
 import android.util.DisplayMetrics;
 import android.view.Display;
 import android.view.WindowManager;
+import java.io.UnsupportedEncodingException;
+import java.util.Locale;
 
 public class Cocos2dxHelper {
   // ===========================================================
@@ -60,7 +59,8 @@ public class Cocos2dxHelper {
   // Constructors
   // ===========================================================
 
-	public static void init(final Context pContext, final Cocos2dxHelperListener pCocos2dxHelperListener) {
+  public static void init(final Context pContext,
+      final Cocos2dxHelperListener pCocos2dxHelperListener) {
     final ApplicationInfo applicationInfo = pContext.getApplicationInfo();
 
     Cocos2dxHelper.sContext = pContext;
@@ -92,7 +92,7 @@ public class Cocos2dxHelper {
 
   private static native void nativeSetApkPath(final String pApkPath);
 
-	private static native void nativeSetEditTextDialogResult(final byte[] pBytes);
+  private static native void nativeSetEditTextDialogResult(long source, final byte[] pBytes);
 
   public static String getCocos2dxPackageName() {
     return Cocos2dxHelper.sPackageName;
@@ -119,7 +119,6 @@ public class Cocos2dxHelper {
     Cocos2dxHelper.sCocos2dxAccelerometer.enable();
   }
 
-
   public static void setAccelerometerInterval(float interval) {
     Cocos2dxHelper.sCocos2dxAccelerometer.setInterval(interval);
   }
@@ -234,18 +233,26 @@ public class Cocos2dxHelper {
     Cocos2dxHelper.sCocos2dxHelperListener.showDialog(pTitle, pMessage);
   }
 
-	private static void showEditTextDialog(final String pTitle, final String pMessage, final int pInputMode, final int pInputFlag, final int pReturnType, final int pMaxLength) {
-		Cocos2dxHelper.sCocos2dxHelperListener.showEditTextDialog(pTitle, pMessage, pInputMode, pInputFlag, pReturnType, pMaxLength);
+  private static void showEditTextDialog(long source, final String pTitle,
+      final String pMessage,
+      final int pInputMode, final int pInputFlag, final int pReturnType, final int pMaxLength,
+      final float x, final float y, float width, float height, int color) {
+    Cocos2dxHelper.sCocos2dxHelperListener.showEditTextDialog(source, pTitle, pMessage, pInputMode,
+        pInputFlag, pReturnType, pMaxLength, x, y, width, height, color);
+  }
+
+  private static void destroyEditText(long source) {
+    Cocos2dxHelper.sCocos2dxHelperListener.destroyBindingView(source);
   }
 
-	public static void setEditTextDialogResult(final String pResult) {
+  public static void setEditTextDialogResult(final long source, final String pResult) {
     try {
       final byte[] bytesUTF8 = pResult.getBytes("UTF8");
 
       Cocos2dxHelper.sCocos2dxHelperListener.runOnGLThread(new Runnable() {
         @Override
         public void run() {
-					Cocos2dxHelper.nativeSetEditTextDialogResult(bytesUTF8);
+          Cocos2dxHelper.nativeSetEditTextDialogResult(source, bytesUTF8);
         }
       });
     } catch (UnsupportedEncodingException pUnsupportedEncodingException) {
@@ -253,17 +260,13 @@ public class Cocos2dxHelper {
     }
   }
 
-    public static int getDPI()
-    {
-		if (sContext != null)
-		{
+  public static int getDPI() {
+    if (sContext != null) {
       DisplayMetrics metrics = new DisplayMetrics();
       WindowManager wm = ((Activity) sContext).getWindowManager();
-			if (wm != null)
-			{
+      if (wm != null) {
         Display d = wm.getDefaultDisplay();
-				if (d != null)
-				{
+        if (d != null) {
           d.getMetrics(metrics);
           return (int) (metrics.density * 160.0f);
         }
@@ -272,52 +275,91 @@ public class Cocos2dxHelper {
     return -1;
   }
 
+  private static DisplayMetrics getDisplayMetrics() {
+    if (sContext != null) {
+      DisplayMetrics metrics = new DisplayMetrics();
+      WindowManager wm = ((Activity) sContext).getWindowManager();
+      if (wm != null) {
+        Display d = wm.getDefaultDisplay();
+        if (d != null) {
+          d.getMetrics(metrics);
+          return metrics;
+        }
+      }
+    }
+    return null;
+  }
+
+  private static int getScreenWidth() {
+    DisplayMetrics metrics = getDisplayMetrics();
+    if (metrics != null) {
+      return metrics.widthPixels;
+    }
+    return -1;
+  }
+
+  private static int getScreenHeight() {
+    DisplayMetrics metrics = getDisplayMetrics();
+    if (metrics != null) {
+      return metrics.heightPixels;
+    }
+    return -1;
+  }
+
   // ===========================================================
   // Functions for CCUserDefault
   // ===========================================================
 
   public static boolean getBoolForKey(String key, boolean defaultValue) {
-    	SharedPreferences settings = ((Activity)sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
+    SharedPreferences settings =
+        ((Activity) sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
     return settings.getBoolean(key, defaultValue);
   }
 
   public static int getIntegerForKey(String key, int defaultValue) {
-    	SharedPreferences settings = ((Activity)sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
+    SharedPreferences settings =
+        ((Activity) sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
     return settings.getInt(key, defaultValue);
   }
 
   public static float getFloatForKey(String key, float defaultValue) {
-    	SharedPreferences settings = ((Activity)sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
+    SharedPreferences settings =
+        ((Activity) sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
     return settings.getFloat(key, defaultValue);
   }
 
   public static double getDoubleForKey(String key, double defaultValue) {
     // SharedPreferences doesn't support saving double value
-    	SharedPreferences settings = ((Activity)sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
+    SharedPreferences settings =
+        ((Activity) sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
     return settings.getFloat(key, (float) defaultValue);
   }
 
   public static String getStringForKey(String key, String defaultValue) {
-    	SharedPreferences settings = ((Activity)sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
+    SharedPreferences settings =
+        ((Activity) sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
     return settings.getString(key, defaultValue);
   }
 
   public static void setBoolForKey(String key, boolean value) {
-    	SharedPreferences settings = ((Activity)sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
+    SharedPreferences settings =
+        ((Activity) sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
     SharedPreferences.Editor editor = settings.edit();
     editor.putBoolean(key, value);
     editor.commit();
   }
 
   public static void setIntegerForKey(String key, int value) {
-    	SharedPreferences settings = ((Activity)sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
+    SharedPreferences settings =
+        ((Activity) sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
     SharedPreferences.Editor editor = settings.edit();
     editor.putInt(key, value);
     editor.commit();
   }
 
   public static void setFloatForKey(String key, float value) {
-    	SharedPreferences settings = ((Activity)sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
+    SharedPreferences settings =
+        ((Activity) sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
     SharedPreferences.Editor editor = settings.edit();
     editor.putFloat(key, value);
     editor.commit();
@@ -325,14 +367,16 @@ public class Cocos2dxHelper {
 
   public static void setDoubleForKey(String key, double value) {
     // SharedPreferences doesn't support recording double value
-    	SharedPreferences settings = ((Activity)sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
+    SharedPreferences settings =
+        ((Activity) sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
     SharedPreferences.Editor editor = settings.edit();
     editor.putFloat(key, (float) value);
     editor.commit();
   }
 
   public static void setStringForKey(String key, String value) {
-    	SharedPreferences settings = ((Activity)sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
+    SharedPreferences settings =
+        ((Activity) sContext).getSharedPreferences(Cocos2dxHelper.PREFS_NAME, 0);
     SharedPreferences.Editor editor = settings.edit();
     editor.putString(key, value);
     editor.commit();
@@ -344,8 +388,14 @@ public class Cocos2dxHelper {
 
   public static interface Cocos2dxHelperListener {
     public void showDialog(final String pTitle, final String pMessage);
-		public void showEditTextDialog(final String pTitle, final String pMessage, final int pInputMode, final int pInputFlag, final int pReturnType, final int pMaxLength);
+
+    public void showEditTextDialog(final long source, final String pTitle, final String pMessage,
+        final int pInputMode,
+        final int pInputFlag, final int pReturnType, final int pMaxLength, float x, float y,
+        float width, float height, int color);
 
     public void runOnGLThread(final Runnable pRunnable);
+
+    void destroyBindingView(long source);
   }
 }
diff --git a/cocos2dx/platform/android/jni/Java_org_cocos2dx_lib_Cocos2dxHelper.cpp b/cocos2dx/platform/android/jni/Java_org_cocos2dx_lib_Cocos2dxHelper.cpp
index 2aef591..84634f9 100644
--- a/cocos2dx/platform/android/jni/Java_org_cocos2dx_lib_Cocos2dxHelper.cpp
+++ b/cocos2dx/platform/android/jni/Java_org_cocos2dx_lib_Cocos2dxHelper.cpp
@@ -12,9 +12,6 @@
 
 #define  CLASS_NAME "org/cocos2dx/lib/Cocos2dxHelper"
 
-static EditTextCallback s_pfEditTextCallback = NULL;
-static void* s_ctx = NULL;
-
 using namespace cocos2d;
 using namespace std;
 
@@ -26,25 +23,6 @@ extern "C" {
         g_apkPath = JniHelper::jstring2string(apkPath);
     }
 
-    JNIEXPORT void JNICALL Java_org_cocos2dx_lib_Cocos2dxHelper_nativeSetEditTextDialogResult(JNIEnv * env, jobject obj, jbyteArray text) {
-        jsize  size = env->GetArrayLength(text);
-
-        if (size > 0) {
-            jbyte * data = (jbyte*)env->GetByteArrayElements(text, 0);
-            char* pBuf = (char*)malloc(size+1);
-            if (pBuf != NULL) {
-                memcpy(pBuf, data, size);
-                pBuf[size] = '\0';
-                // pass data to edittext's delegate
-                if (s_pfEditTextCallback) s_pfEditTextCallback(pBuf, s_ctx);
-                free(pBuf);
-            }
-            env->ReleaseByteArrayElements(text, data, 0);
-        } else {
-            if (s_pfEditTextCallback) s_pfEditTextCallback("", s_ctx);
-        }
-    }
-
 }
 
 const char * getApkPath() {
@@ -75,34 +53,6 @@ void showDialogJNI(const char * pszMsg, const char * pszTitle) {
     }
 }
 
-void showEditTextDialogJNI(const char* pszTitle, const char* pszMessage, int nInputMode, int nInputFlag, int nReturnType, int nMaxLength, EditTextCallback pfEditTextCallback, void* ctx) {
-    if (pszMessage == NULL) {
-        return;
-    }
-
-    s_pfEditTextCallback = pfEditTextCallback;
-    s_ctx = ctx;
-
-    JniMethodInfo t;
-    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, "showEditTextDialog", "(Ljava/lang/String;Ljava/lang/String;IIII)V")) {
-        jstring stringArg1;
-
-        if (!pszTitle) {
-            stringArg1 = t.env->NewStringUTF("");
-        } else {
-            stringArg1 = t.env->NewStringUTF(pszTitle);
-        }
-
-        jstring stringArg2 = t.env->NewStringUTF(pszMessage);
-
-        t.env->CallStaticVoidMethod(t.classID, t.methodID, stringArg1, stringArg2, nInputMode, nInputFlag, nReturnType, nMaxLength);
-
-        t.env->DeleteLocalRef(stringArg1);
-        t.env->DeleteLocalRef(stringArg2);
-        t.env->DeleteLocalRef(t.classID);
-    }
-}
-
 void terminateProcessJNI() {
     JniMethodInfo t;
 
@@ -337,3 +287,17 @@ void setStringForKeyJNI(const char* pKey, const char* value)
         t.env->DeleteLocalRef(stringArg2);
     }
 }
+
+int getScreenHeightJNI()
+{
+    JniMethodInfo t;
+    
+    if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, "getScreenHeight", "()I")) {
+        jint ret = t.env->CallStaticIntMethod(t.classID, t.methodID);
+        
+        t.env->DeleteLocalRef(t.classID);
+
+        return ret;
+    }
+    return -1;
+}
diff --git a/cocos2dx/platform/android/jni/Java_org_cocos2dx_lib_Cocos2dxHelper.h b/cocos2dx/platform/android/jni/Java_org_cocos2dx_lib_Cocos2dxHelper.h
index b6dc556..9afdfe9 100644
--- a/cocos2dx/platform/android/jni/Java_org_cocos2dx_lib_Cocos2dxHelper.h
+++ b/cocos2dx/platform/android/jni/Java_org_cocos2dx_lib_Cocos2dxHelper.h
@@ -26,11 +26,8 @@ THE SOFTWARE.
 
 #include <string>
 
-typedef void (*EditTextCallback)(const char* pText, void* ctx);
-
 extern const char * getApkPath();
 extern void showDialogJNI(const char * pszMsg, const char * pszTitle);
-extern void showEditTextDialogJNI(const char* pszTitle, const char* pszContent, int nInputMode, int nInputFlag, int nReturnType, int nMaxLength, EditTextCallback pfEditTextCallback, void* ctx);
 extern void terminateProcessJNI();
 extern std::string getCurrentLanguageJNI();
 extern std::string getPackageNameJNI();
@@ -49,5 +46,6 @@ extern void setIntegerForKeyJNI(const char* pKey, int value);
 extern void setFloatForKeyJNI(const char* pKey, float value);
 extern void setDoubleForKeyJNI(const char* pKey, double value);
 extern void setStringForKeyJNI(const char* pKey, const char* value);
+extern int getScreenHeightJNI();
 
 #endif /* __Java_org_cocos2dx_lib_Cocos2dxHelper_H__ */
diff --git a/cocos2dx/platform/third_party/android/prebuilt/libcurl/libs/armeabi-v7a/libcurl.a b/cocos2dx/platform/third_party/android/prebuilt/libcurl/libs/armeabi-v7a/libcurl.a
new file mode 100644
index 0000000..44e542e
Binary files /dev/null and b/cocos2dx/platform/third_party/android/prebuilt/libcurl/libs/armeabi-v7a/libcurl.a differ
diff --git a/cocos2dx/platform/third_party/android/prebuilt/libcurl/libs/armeabi/libcurl.a b/cocos2dx/platform/third_party/android/prebuilt/libcurl/libs/armeabi/libcurl.a
new file mode 100644
index 0000000..5b9f4ee
Binary files /dev/null and b/cocos2dx/platform/third_party/android/prebuilt/libcurl/libs/armeabi/libcurl.a differ
diff --git a/cocos2dx/platform/third_party/android/prebuilt/libcurl/libs/x86/libcurl.a b/cocos2dx/platform/third_party/android/prebuilt/libcurl/libs/x86/libcurl.a
new file mode 100644
index 0000000..445f272
Binary files /dev/null and b/cocos2dx/platform/third_party/android/prebuilt/libcurl/libs/x86/libcurl.a differ
diff --git a/cocos2dx/platform/third_party/android/prebuilt/libjpeg/libs/armeabi-v7a/libjpeg.a b/cocos2dx/platform/third_party/android/prebuilt/libjpeg/libs/armeabi-v7a/libjpeg.a
new file mode 100644
index 0000000..68aaf26
Binary files /dev/null and b/cocos2dx/platform/third_party/android/prebuilt/libjpeg/libs/armeabi-v7a/libjpeg.a differ
diff --git a/cocos2dx/platform/third_party/android/prebuilt/libjpeg/libs/armeabi/libjpeg.a b/cocos2dx/platform/third_party/android/prebuilt/libjpeg/libs/armeabi/libjpeg.a
new file mode 100644
index 0000000..78e9ef9
Binary files /dev/null and b/cocos2dx/platform/third_party/android/prebuilt/libjpeg/libs/armeabi/libjpeg.a differ
diff --git a/cocos2dx/platform/third_party/android/prebuilt/libjpeg/libs/x86/libjpeg.a b/cocos2dx/platform/third_party/android/prebuilt/libjpeg/libs/x86/libjpeg.a
new file mode 100644
index 0000000..e8d210c
Binary files /dev/null and b/cocos2dx/platform/third_party/android/prebuilt/libjpeg/libs/x86/libjpeg.a differ
diff --git a/cocos2dx/platform/third_party/android/prebuilt/libpng/libs/armeabi-v7a/libpng.a b/cocos2dx/platform/third_party/android/prebuilt/libpng/libs/armeabi-v7a/libpng.a
new file mode 100644
index 0000000..2f84bee
Binary files /dev/null and b/cocos2dx/platform/third_party/android/prebuilt/libpng/libs/armeabi-v7a/libpng.a differ
diff --git a/cocos2dx/platform/third_party/android/prebuilt/libpng/libs/armeabi/libpng.a b/cocos2dx/platform/third_party/android/prebuilt/libpng/libs/armeabi/libpng.a
new file mode 100644
index 0000000..7fc4172
Binary files /dev/null and b/cocos2dx/platform/third_party/android/prebuilt/libpng/libs/armeabi/libpng.a differ
diff --git a/cocos2dx/platform/third_party/android/prebuilt/libpng/libs/x86/libpng.a b/cocos2dx/platform/third_party/android/prebuilt/libpng/libs/x86/libpng.a
new file mode 100644
index 0000000..649d8a9
Binary files /dev/null and b/cocos2dx/platform/third_party/android/prebuilt/libpng/libs/x86/libpng.a differ
diff --git a/cocos2dx/platform/third_party/android/prebuilt/libtiff/libs/armeabi-v7a/libtiff.a b/cocos2dx/platform/third_party/android/prebuilt/libtiff/libs/armeabi-v7a/libtiff.a
new file mode 100644
index 0000000..08568c7
Binary files /dev/null and b/cocos2dx/platform/third_party/android/prebuilt/libtiff/libs/armeabi-v7a/libtiff.a differ
diff --git a/cocos2dx/platform/third_party/android/prebuilt/libtiff/libs/armeabi/libtiff.a b/cocos2dx/platform/third_party/android/prebuilt/libtiff/libs/armeabi/libtiff.a
new file mode 100644
index 0000000..3e4d0de
Binary files /dev/null and b/cocos2dx/platform/third_party/android/prebuilt/libtiff/libs/armeabi/libtiff.a differ
diff --git a/cocos2dx/platform/third_party/android/prebuilt/libtiff/libs/x86/libtiff.a b/cocos2dx/platform/third_party/android/prebuilt/libtiff/libs/x86/libtiff.a
new file mode 100644
index 0000000..f14376c
Binary files /dev/null and b/cocos2dx/platform/third_party/android/prebuilt/libtiff/libs/x86/libtiff.a differ
diff --git a/cocos2dx/platform/third_party/android/prebuilt/libwebp/libs/armeabi-v7a/libwebp.a b/cocos2dx/platform/third_party/android/prebuilt/libwebp/libs/armeabi-v7a/libwebp.a
new file mode 100644
index 0000000..adc7cbe
Binary files /dev/null and b/cocos2dx/platform/third_party/android/prebuilt/libwebp/libs/armeabi-v7a/libwebp.a differ
diff --git a/cocos2dx/platform/third_party/android/prebuilt/libwebp/libs/armeabi/libwebp.a b/cocos2dx/platform/third_party/android/prebuilt/libwebp/libs/armeabi/libwebp.a
new file mode 100644
index 0000000..253c75f
Binary files /dev/null and b/cocos2dx/platform/third_party/android/prebuilt/libwebp/libs/armeabi/libwebp.a differ
diff --git a/cocos2dx/platform/third_party/android/prebuilt/libwebp/libs/x86/libwebp.a b/cocos2dx/platform/third_party/android/prebuilt/libwebp/libs/x86/libwebp.a
new file mode 100644
index 0000000..66736df
Binary files /dev/null and b/cocos2dx/platform/third_party/android/prebuilt/libwebp/libs/x86/libwebp.a differ
diff --git a/cocos2dx/platform/third_party/tizen/prebuilt/libwebp/libs/armv7l/libwebp.a b/cocos2dx/platform/third_party/tizen/prebuilt/libwebp/libs/armv7l/libwebp.a
new file mode 100644
index 0000000..d1b5261
Binary files /dev/null and b/cocos2dx/platform/third_party/tizen/prebuilt/libwebp/libs/armv7l/libwebp.a differ
diff --git a/cocos2dx/platform/third_party/tizen/prebuilt/libwebp/libs/x86/libwebp.a b/cocos2dx/platform/third_party/tizen/prebuilt/libwebp/libs/x86/libwebp.a
new file mode 100644
index 0000000..4e9f805
Binary files /dev/null and b/cocos2dx/platform/third_party/tizen/prebuilt/libwebp/libs/x86/libwebp.a differ
diff --git a/cocos2dx/textures/CCTextureCache.cpp b/cocos2dx/textures/CCTextureCache.cpp
index fecf268..51740d2 100644
--- a/cocos2dx/textures/CCTextureCache.cpp
+++ b/cocos2dx/textures/CCTextureCache.cpp
@@ -624,7 +624,7 @@ void CCTextureCache::removeUnusedTextures()
         list<CCDictElement*> elementToRemove;
         CCDICT_FOREACH(m_pTextures, pElement)
         {
-            CCLOG("cocos2d: CCTextureCache: texture: %s", pElement->getStrKey());
+            //CCLOG("cocos2d: CCTextureCache: texture: %s", pElement->getStrKey());
             CCTexture2D *value = (CCTexture2D*)pElement->getObject();
             if (value->retainCount() == 1)
             {
@@ -635,7 +635,7 @@ void CCTextureCache::removeUnusedTextures()
         // remove elements
         for (list<CCDictElement*>::iterator iter = elementToRemove.begin(); iter != elementToRemove.end(); ++iter)
         {
-            CCLOG("cocos2d: CCTextureCache: removing unused texture: %s", (*iter)->getStrKey());
+            //CCLOG("cocos2d: CCTextureCache: removing unused texture: %s", (*iter)->getStrKey());
             m_pTextures->removeObjectForElememt(*iter);
         }
     }
